configurations {
    sql
}
dependencies {
    sql 'mysql:mysql-connector-java:8.0.16'
}
ext {
  dbHost = "${dbHost}"
  dbPort = "${dbPort}"
  dbSid = "petstoreDB${tp_number}"
  dbDriver = 'com.mysql.cj.jdbc.Driver'
  dbUrl = "jdbc:mysql://${dbHost}:${dbPort}/${dbSid}?useSSL=false&serverTimezone=UTC"
  dbUser = "$dbUser"
  dbPassword = "$dbPassword"
}
flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
}

task myTest(type: JavaExec){
  dependsOn compileJava
  dependsOn compileTestJava
  group = 'verification'
  description = 'Runs the unit tests in text mode.'
  main = "AllTests"
  classpath files([ "${buildDir}/classes/java/main", "${buildDir}/classes/java/test" ])
  classpath sourceSets.test.runtimeClasspath // required to find JUnit
}

task zip_src {
  ant.zip(destfile: "TP${tp_number}src.zip") {
    fileset(dir: '.') {
      includesfile(name: 'missingFiles.txt')
    }
  }
}

task reset_db {
  group = 'build'
  description = 'Reset the database.'
  dependsOn flywayClean
}

task create_db {
  group = 'build'
  description = 'Builds the database schema.'
  dependsOn flywayClean, flywayMigrate
}

task insert_data {
  group = 'build'
  description = 'Inserts the database data.'
}
insert_data.doLast {
  // already done by flyway! runSQLScript('./server/src/config/data.sql')
}
def runSQLScript(scriptName) {
    ant.sql(driver: dbDriver,
            url: dbUrl,
            userid: dbUser,
            password: dbPassword,
            encoding: 'UTF-8',
            classpath: configurations.sql.asPath) {
        fileset(file: scriptName)
    }
}

task mark(type: JavaExec){
  group = 'verification'
  description = 'Runs other unit tests and Generates TP result.'
  dependsOn compileJava
  dependsOn zip_src
  dependsOn reset_db, create_db
  main = "Tests"
  systemProperty "fichierScenario", "TP${tp_number}.test"
  classpath files([ "${buildDir}/classes/java/main" ])
  classpath sourceSets.test.runtimeClasspath // required to find JUnit
  classpath files([ "install/test${tp_number}.jar" ])
}

clean.doLast {
      // delete also files generated by mark task
      file("${rootDir}/TP${tp_number}.test").delete()
      file("${rootDir}/TP${tp_number}.html").delete()
      file("${rootDir}/TP${tp_number}src.zip").delete()
}

war { // mandatory to generate war file!
    enabled = true
}
task deployToTomcat(type: Copy) {
  group = 'application'
  description = 'Deploys the war file to external Tomcat.'
  dependsOn war
  from war.archivePath
  into "$System.env.TOMCAT_HOME/webapps"
  rename project.name + "-${version}.war", 'petstore.war'
  onlyIf {
      System.env['TOMCAT_HOME'] != null
  }
}
deployToTomcat.doFirst {
  if ( System.env['TOMCAT_HOME'] == null )
    throw new GradleException('error : TOMCAT_HOME should be defined ')
}